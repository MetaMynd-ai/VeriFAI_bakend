import { IAuth } from "@hsuite/types";
import configuration from "config/configuration";
import mainnet from "./mainnet";
import testnet from "./testnet";

export default (): {
    auth: IAuth.IConfiguration.IAuthentication
} => ({
    auth: {
        enabled: true,
        commonOptions: {
            redis: {
                ttl: 120,
                socket: {
                    host: process.env.REDIS_URL,
                    port: Number(process.env.REDIS_PORT),
                },
                password: process.env.REDIS_PASSWORD
            },
            jwt: {
                secret: process.env.SESSION_SECRET,
                signOptions: {
                    expiresIn: '364d'
                },
            },
            cookieOptions: {
                sameSite: false,
                httpOnly: true,
                maxAge: 60000 * 60 * 24 * 364,
                secure: false,  
                //secure: process.env.NODE_ENV == 'mainnet' ? true : false
            },
            passport: IAuth.IConfiguration.IPassportStrategy.REDIS,
            appName: 'VF-Node',
            operator: configuration().environment == 'mainnet' ?
                mainnet().node : testnet().node
        },
        web2: {
            enabled: true,
            options: {
                confirmation_required: false,
                admin_only: false,
                // do not change PLACE_HOLDER_FOR_TOKEN, it will automatically
                // be replaced by the token value generated by the system
                // replace your_endpoint with the name of the endpoint you want to use
                // for password recovery, your frontend app must be able to forward the
                // token and the new password to your SmartApp
                sendMailOptions: {
                    reset: {
                        from: process.env.MAIL_USER,
                        subject: 'YourBrand - Password Recovery',
                        text: process.env.NODE_ENV == 'testnet' ?
                            `If you want to recover your password, please click on the following link: ${process.env.DEV_FRONTEND_DOMAIN}/#/intro?token=PLACE_HOLDER_FOR_TOKEN`
                            : `If you want to recover your password, please click on the following link: ${process.env.PROD_FRONTEND_DOMAIN}/#/intro?token=PLACE_HOLDER_FOR_TOKEN`,
                        html: process.env.NODE_ENV == 'testnet' ?
                            `If you want to recover your password, please click on the following link: ${process.env.DEV_FRONTEND_DOMAIN}/#/intro?token=PLACE_HOLDER_FOR_TOKEN`
                            : `If you want to recover your password, please click on the following link: ${process.env.PROD_FRONTEND_DOMAIN}/#/intro?token=PLACE_HOLDER_FOR_TOKEN`,
                    },
                    confirm: {
                        from: process.env.MAIL_USER,
                        subject: 'YourBrand - Password Recovery',
                        text: process.env.NODE_ENV == 'testnet' ?
                            `Welcome to Banqua, please confirm your email by clicking on the following link: ${process.env.DEV_FRONTEND_DOMAIN}/#/email_confirmation?token=PLACE_HOLDER_FOR_TOKEN`
                            : `Welcome to Banqua, please confirm your email by clicking on the following link: ${process.env.PROD_FRONTEND_DOMAIN}/#/email_confirmation?token=PLACE_HOLDER_FOR_TOKEN`,
                        html: process.env.NODE_ENV == 'testnet' ?
                            `Welcome to Banqua, please confirm your email by clicking on the following link: ${process.env.DEV_FRONTEND_DOMAIN}/#/email_confirmation?token=PLACE_HOLDER_FOR_TOKEN`
                            : `Welcome to Banqua, please confirm your email by clicking on the following link: ${process.env.PROD_FRONTEND_DOMAIN}/#/email_confirmation?token=PLACE_HOLDER_FOR_TOKEN`,
                    }
                },
                mailerOptions: {
                    transport: {
                        host: process.env.MAIL_HOST,
                        port: Number(process.env.MAIL_PORT),
                        secure: true,
                        debug: false,
                        logger: false,
                        auth: {
                            user: process.env.MAIL_USER,
                            pass: process.env.MAIL_PASSWORD
                        }
                    }
                },
                twilioOptions: {
                    enabled: false,
                    twilioSecrets: {
                        accountSid: process.env.TWILIO_ACCOUNT_SID,
                        authToken: process.env.TWILIO_AUTH_TOKEN,
                        serviceSid: process.env.TWILIO_SERVICE_SID
                    }
                }
            }
        },
        web3: {
            enabled: false,
            options: {
                tokenGateOptions: {
                    enabled: true,
                    roles: [
                        // {
                        //     role: 'user',
                        //     tokenId: null
                        // },
                        // {
                        //     role: 'smart-node',
                        //     tokenId: process.env.NODE_ENV == 'mainnet' ? 
                        //     process.env.PROD_TOKEN_GATE_ID :
                        //     process.env.DEV_TOKEN_GATE_ID
                        // }
                    ] 
                }
            }
        }
    }
});
